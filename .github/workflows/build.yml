name: Build and Deploy to ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    environment:
      name: Dev  # Specifies the environment name

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      IMAGE_REPO_NAME: ${{ secrets.IMAGE_REPO_NAME }}
      IMAGE_REPO_NAME1: ${{ secrets.IMAGE_REPO_NAME1 }}
      IMAGE_TAG: ${{ vars.IMAGE_TAG }}  # Use the variable from the Dev environment
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      REGION: ${{ secrets.REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: 'private'


    - name: Debug Docker Tag
      run: |
         echo "Docker tag for backend: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
         echo "Docker tag for frontend: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME1:$IMAGE_TAG"
      

    - name: Build and tag Docker image for backend
      run: |
        cd backend/
        echo "Building Docker image..."
        docker build --build-arg SECRET_KEY=$SECRET_KEY --build-arg REGION=$REGION -t $IMAGE_REPO_NAME:$IMAGE_TAG .
        docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

    - name: Build and tag Docker image for frontend
      run: |
        cd frontend/
        echo "Building Docker image..."
        docker build -t $IMAGE_REPO_NAME1:$IMAGE_TAG .
        docker tag $IMAGE_REPO_NAME1:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME1:$IMAGE_TAG

    - name: Push Docker image to Amazon ECR for backend
      run: |
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

    - name: Push Docker image to Amazon ECR for frontend
      run: |
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME1:$IMAGE_TAG
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-deploy  # Ensure deploy job runs after build-and-deploy

    environment:
      name: Dev  # Specifies the environment name


    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      USER_NAME: ${{ secrets.USER_NAME }}
      HOSTNAME: ${{ secrets.HOSTNAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: SSH and Deploy - Stop and Clean Up
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          #!/bin/bash
          set -e

          cd /home/ubuntu

          # Print current working directory
          echo "Current directory: $(pwd)"

          # List files in the current directory
          ls -l

          # Stop the running container (if any)
          docker compose down

          # Remove all Docker images
          IMAGES=$(docker images -q)
          if [ -n "${IMAGES}" ]; then
              docker rmi ${IMAGES}
          else
              echo "No images to remove."
          fi

          # Stop and remove all Docker containers
          CONTAINERS=$(docker ps -aq)
          if [ -n "${CONTAINERS}" ]; then
              docker stop ${CONTAINERS}
              docker container prune -f
          else
              echo "No containers to stop or